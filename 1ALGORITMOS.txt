 //DIJAKSTRA
 
 distancias[0]=0;
    priority_queue< pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>> cola;
    cola.push({0, 0});
    while(!cola.empty()){
        //cout<<cola.top().first<<" "<<cola.top().second<<endl;
        ll valor = cola.top().second;
        ll dist = cola.top().first;
        cola.pop();
        
        if(dist != distancias[valor])continue;
        
        for(auto ar : adj[valor]){
            ll vecino = ar.second;
            ll arista = ar.first;
            if(distancias[valor] + arista < distancias[vecino]){
                distancias[vecino] = distancias[valor] + arista;
                ruta[vecino] = valor;
                cola.push({distancias[vecino], vecino});
            }
        }
    }

    //MOSTRAR DIJAKSTRA
    
    if(ruta[n-1]==-1)cout<<"-1"<<endl;
    else{
        for(ll v = n - 1 ; v != 0 ; v = ruta[v])path.push_back(v+1);
        path.push_back(1);
        reverse(path.begin(), path.end());
        for(auto it : path )cout<<it<<" ";
    }
////BFS EN CUADRICULA

int n,m; cin>>n>>n;
vector<vector<int>> vec(n,vector<int>(m));
vector<vector<bool>> marcado(n,vector<bool>(m,false));
vector<pii> current;
vector<int> dx = {-1, -1, -1, 0, 1, 1, 1, 0};
vector<int> dy = {-1, 0, 1, 1, 1, 0, -1, -1};
char upper;
rep(i,n){
    rep(j,m){
        cin>>upper;
    }
}
int ans = 0;
while(!current.empty()){
    ans++;
    vector<pii> news;
    int a, b;
    rep(i,current.size()){
        rep(j,8){
            a = current[i].F + dx[j]; b = current[i].S + dy[j];
            if(a<n and a >= 0 and b  >=0 and b <m and !marcado[a][b]){
                    news.pb({a,b});
                    marcado[a][b] = true;
            }

        }
    }
    current = news;
}


////Binary search(logn)
void Binary(int ga){
    int l=0, r=n-1;
    bool find=false;
    while(l<r){
        int mid=(l+r)/2;
        if(num[mid]==ga){
            cout<<"YES\n";
            find=true;
            break;
        } else if(num[mid]<ga) {
            l=mid+1;
        } else r=mid-1;  
    }
    if(!find) cout<<"NO\n";
}

//Algoritmo para hallar la potencia de un numero y al mismo tiempo su residuo. Complejidad O(logN)
ll PowerMod(ll x, ll y, ll p){
    ll ans=1;
    x=x%p;
    while(y>0){
        if(y&1) ans=(x*ans)%p;
        y=y>>1;
        x=(x*x)%p;
    }
    return ans;
}

//Algoritmo O(logn) para tener un numero fibonacci
int fibonacci(int n){
    return (pow((1+sqrt(5))/2,n)-pow((1-sqrt(5))/2,n))/sqrt(5);
}

//Algoritmo O(n^0.5) para verificar si un numero es primo
bool es_primo(int n){
    for(int i=2;i*i<=n;i++){
        if(n%i==0) return false;
    }
    return true;
}

//Criba de Eratostenes. O(n*(ln(ln(n)))
const int N=1000000;
bool is_prime[N+1];
void Sieve(ll n){
    is_prime[0]=is_prime[1]=false;
    for(ll i=2;i<=n;i++) is_prime[i]=true;
    for(ll i=2;i<=n;i++){
        if(!is_prime[i]) continue;
        for(ll j=2*i;j<=n;j+=i){
            is_prime[j]=false;
        }
    }
}

//Factorizacion gaaaaaaa
const ll N = 100000;
ll first_prime_divisors[N+1];
void Sieve(ll  n){
    for (ll i = 1; i <= n; i++) first_prime_divisors[i] = i;
    for (ll  i = 2; i <= n; i++){
        if(first_prime_divisors[i] != i) continue; 
        for(ll j = i * i; j <= n; j += i){
            if (first_prime_divisors[j] == j)
            first_prime_divisors[j] = i ;
        }
    }
}
vector<ll> Prime_factor(ll n){
    vector<ll> factorization;
    if (n == 1) factorization.push_back(n);
    while(n > 1){
        ll p = first_prime_divisors[n];
        while(n % p == 0){
            n /= p ;
        }
        factorization.push_back(p);
    }
    
    return factorization;
}

//dfs de manera recursiva
vector<vi> grafo;
vector<int> visited;

void dfs(int nodoActual){
    visited[nodoActual] = true;
    for(int vecino : grafo[nodoActual]){
        if(visited[vecino]==false){
            visited[vecino]=true;
            dfs(vecino);
        }
    }
}